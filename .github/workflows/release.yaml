name: Release

on:
  push:
    tags:
      - "v*.*.*"

defaults:
  run:
    shell: bash

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 8

jobs:
  Android:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Conan
        run: pip install conan

      - name: Configure Conan
        run: |
          conan profile detect --force
          conan config install https://github.com/willtobyte/conan-configs.git --type git

      - name: Configure tools & CMake
        run: |
          cat <<'EOF' >> ~/.conan2/profiles/default
          [replace_tool_requires]
          meson/*: meson/[*]
          pkgconf/*: pkgconf/[*]

          [tool_requires]
          !cmake/*: cmake/[>=3 <4]
          EOF

      - name: Conan profile
        run: |
          cat > ~/.conan2/profiles/android <<EOF
          include(default)

          [settings]
          os=Android
          os.api_level=34
          arch=armv8
          compiler=clang
          compiler.version=19
          compiler.libcxx=c++_static
          compiler.cppstd=23

          [tool_requires]
          android-ndk/[*]

          [conf]
          user.sdl:android=True
          EOF

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing --profile=android --settings compiler.cppstd=23 --settings build_type=Release

      - name: Build
        run: |
          cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --verbose

      - name: Compress artifacts
        working-directory: build
        run: |
          mkdir -p ../artifacts
          chmod -x LICENSES
          tar -cpzvf Android.tar.gz libcarimbo.so LICENSES
          mv Android.tar.gz ../artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android
          path: artifacts/*

  iOS:
    runs-on: macos-latest
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Conan
        run: |
          brew install conan
          conan profile detect --force
          conan config install https://github.com/willtobyte/conan-configs.git --type git

      - name: Configure tools & CMake
        run: |
          cat <<'EOF' >> ~/.conan2/profiles/default
          [replace_tool_requires]
          meson/*: meson/[*]
          pkgconf/*: pkgconf/[*]

          [tool_requires]
          !cmake/*: cmake/[>=3 <4]
          EOF

      - name: Conan profile
        run: |
          cat > ~/.conan2/profiles/ios <<EOF
          include(default)

          [settings]
          os=iOS
          os.version=16.0
          os.sdk=iphoneos
          arch=armv8
          compiler=apple-clang
          compiler.version=17.0
          compiler.libcxx=libc++
          build_type=Release
          EOF

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing --profile=ios --settings compiler.cppstd=23 --settings build_type=Release

      - name: Build
        run: |
          cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --verbose

  macOS:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Conan
        run: |
          brew install conan
          conan profile detect --force
          conan config install https://github.com/willtobyte/conan-configs.git --type git

      - name: Configure tools & CMake
        run: |
          cat <<'EOF' >> ~/.conan2/profiles/default
          [replace_tool_requires]
          meson/*: meson/[*]
          pkgconf/*: pkgconf/[*]

          [tool_requires]
          !cmake/*: cmake/[>=3 <4]
          EOF

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing --settings compiler.cppstd=23 --settings build_type=Release

      - name: Build
        run: |
          cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --verbose

      - name: Strip binary
        working-directory: build
        run: |
          strip -S -x carimbo

      - name: Compress artifacts
        working-directory: build
        run: |
          mkdir -p ../artifacts
          chmod -R a+rwx carimbo
          chmod 644 LICENSES
          chmod +x carimbo
          tar -cpzvf macOS.tar.gz carimbo LICENSES
          mv macOS.tar.gz ../artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: artifacts/*

  Ubuntu:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Conan
        run: |
          pip install conan
          conan profile detect --force
          conan config install https://github.com/willtobyte/conan-configs.git --type git

      - name: Configure tools & CMake
        run: |
          cat <<'EOF' >> ~/.conan2/profiles/default
          [replace_tool_requires]
          meson/*: meson/[*]
          pkgconf/*: pkgconf/[*]

          [tool_requires]
          !cmake/*: cmake/[>=3 <4]
          EOF

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing --settings compiler.cppstd=23 --settings build_type=Release --conf "tools.system.package_manager:mode=install" --conf "tools.system.package_manager:sudo=True"

      - name: Build
        run: |
          cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --verbose

      - name: Compress artifacts
        working-directory: build
        run: |
          mkdir -p ../artifacts
          chmod +x carimbo
          chmod 644 LICENSES
          tar -czvf Ubuntu.tar.gz carimbo LICENSES
          mv Ubuntu.tar.gz ../artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Ubuntu
          path: artifacts/*

  UbuntuARM:
    runs-on: ubuntu-24.04-arm
    if: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GCC 14
        run: |
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100

      - name: Setup Conan
        run: |
          pip install conan
          conan profile detect --force
          conan config install https://github.com/willtobyte/conan-configs.git --type git

      - name: Configure tools & CMake
        run: |
          cat <<'EOF' >> ~/.conan2/profiles/default
          [tool_requires]
          !cmake/*: cmake/[>=3 <4]
          EOF

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing --settings compiler.cppstd=23 --settings build_type=Release --conf "tools.system.package_manager:mode=install" --conf "tools.system.package_manager:sudo=True"

      - name: Build
        run: |
          cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --verbose

      - name: Compress artifacts
        working-directory: build
        run: |
          mkdir -p ../artifacts
          chmod +x carimbo
          chmod 644 LICENSES
          tar -czvf UbuntuARM.tar.gz carimbo LICENSES
          mv UbuntuARM.tar.gz ../artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: UbuntuARM
          path: artifacts/*

  WebAssembly:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install terser
        run: npm install terser -g

      - name: Setup Conan
        run: |
          pip install conan
          conan profile detect --force
          conan config install https://github.com/willtobyte/conan-configs.git --type git

      - name: Configure tools & CMake
        run: |
          cat <<'EOF' >> ~/.conan2/profiles/default
          [replace_tool_requires]
          meson/*: meson/[*]
          pkgconf/*: pkgconf/[*]

          [tool_requires]
          !cmake/*: cmake/[>=3 <4]
          EOF

      - name: Conan profile
        run: |
          cat > ~/.conan2/profiles/webassembly <<EOF
          include(default)

          [settings]
          arch=wasm
          os=Emscripten

          [tool_requires]
          *: emsdk/3.1.73
          EOF

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing --profile=webassembly --settings compiler.cppstd=23 --settings build_type=Release

      - name: Build
        run: |
          cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS_RELEASE:STRING="-Oz -DNDEBUG -ffunction-sections -fdata-sections" \
            -DCMAKE_CXX_FLAGS_RELEASE:STRING="-Oz -DNDEBUG -ffunction-sections -fdata-sections"

          cmake --build build --config Release --verbose

      - name: Minifiy Carimbo JavaScript runtime
        working-directory: build
        run: |
          terser carimbo.js \
            --compress pure_funcs="console.log,assert" \
            --mangle \
            --mangle-props regex=/^_/ \
            --toplevel \
            --ecma 2020 \
            --module \
            --output carimbo.js

      - name: Strip webassembly
        working-directory: build
        run: |
          cargo install wasm-tools wasm-opt
          wasm-tools strip carimbo.wasm -o carimbo-stripped.wasm
          wasm-opt carimbo-stripped.wasm -Oz --strip-debug --strip-producers -o carimbo.wasm

      - name: Compress artifacts
        working-directory: build
        run: |
          mkdir -p ../artifacts
          zip -jr WebAssembly.zip carimbo.wasm carimbo.js
          mv WebAssembly.zip ../artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WebAssembly
          path: artifacts/*

  Windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Conan
        run: |
          pip install conan
          conan profile detect --force
          conan config install https://github.com/willtobyte/conan-configs.git --type git

      - name: Configure tools & CMake
        run: |
          cat <<'EOF' >> ~/.conan2/profiles/default
          [replace_tool_requires]
          meson/*: meson/[*]
          pkgconf/*: pkgconf/[*]

          [tool_requires]
          !cmake/*: cmake/[>=3 <4]
          EOF

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing --settings compiler.cppstd=23 --settings build_type=Release

      - name: Build
        run: |
          cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --verbose

      - name: Strip binary
        working-directory: build/Release
        shell: powershell
        run: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-Not (Test-Path $vswhere)) {
            Write-Error "vswhere.exe not found. Aborting."
            exit 1
          }

          $installPath = & "$vswhere" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Llvm.Clang -property installationPath
          if (-Not $installPath) {
            Write-Error "Visual Studio with LLVM component not found."
            exit 1
          }

          $llvmStrip = Join-Path $installPath "VC\Tools\Llvm\x64\bin\llvm-strip.exe"
          if (-Not (Test-Path $llvmStrip)) {
            Write-Error "llvm-strip not found at expected location: $llvmStrip"
            exit 1
          }

          & "$llvmStrip" --strip-all carimbo.exe

      - name: Compress artifacts
        working-directory: build
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path "../artifacts" -Force
          Compress-Archive -LiteralPath 'Release/carimbo.exe', 'LICENSES' -DestinationPath "../artifacts/Windows.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows
          path: artifacts/*

  Release:
    if: always()
    needs:
      - Android
      - iOS
      - macOS
      - Ubuntu
      - UbuntuARM
      - WebAssembly
      - Windows
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: false
          files: artifacts/**/*
