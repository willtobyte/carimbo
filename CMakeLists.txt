cmake_minimum_required(VERSION 3.15)
project(carimbo LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON)

set(SDL3_DIR "${CMAKE_BINARY_DIR}")

file(GLOB SOURCE_FILES CONFIGURE_DEPENDS "src/*.cpp")
file(GLOB HEADER_FILES CONFIGURE_DEPENDS "src/*.hpp")
file(GLOB TEMPLATE_FILES CONFIGURE_DEPENDS "src/*.tpp")

add_executable(${PROJECT_NAME})
target_sources(${PROJECT_NAME} PRIVATE
  ${SOURCE_FILES}
  ${HEADER_FILES}
  ${TEMPLATE_FILES}
)

execute_process(
  COMMAND git describe --tags --match "v*.*.*" --abbrev=0
  OUTPUT_VARIABLE latest_tag
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND git rev-parse --short=6 HEAD
  OUTPUT_VARIABLE commit_short
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
add_compile_definitions(GIT_VERSION="${latest_tag}+${commit_short}")

target_compile_definitions(${PROJECT_NAME} PRIVATE
  $<$<BOOL:${TODO}>:TODO>
  $<$<CONFIG:Debug>:DEBUG>
)

find_package(nlohmann_json CONFIG REQUIRED)
find_package(Ogg CONFIG REQUIRED)
find_package(PhysFS CONFIG REQUIRED)
find_package(SDL3 CONFIG REQUIRED)
find_package(sol2 CONFIG REQUIRED)
find_package(SPNG CONFIG REQUIRED)
find_package(Vorbis CONFIG REQUIRED)

set(EMSCRIPTEN FALSE)
if (CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
  set(EMSCRIPTEN TRUE)
endif()

if(NOT EMSCRIPTEN)
  find_package(Boost CONFIG REQUIRED)
  find_package(OpenAL CONFIG REQUIRED)
  find_package(OpenSSL CONFIG REQUIRED)
  find_package(sentry CONFIG QUIET)
  if(HAVE_LUAJIT)
    find_package(luajit CONFIG REQUIRED)
  endif()
endif()

target_link_options(${PROJECT_NAME} PRIVATE
  $<$<BOOL:${EMSCRIPTEN}>:
    -sENVIRONMENT=web
    -sINVOKE_RUN=0
    -sEXIT_RUNTIME=0
    -sEVAL_CTORS=1

    -sINITIAL_MEMORY=256MB
    -sALLOW_MEMORY_GROWTH=1
    -sSTACK_SIZE=8MB
    -sMALLOC=emmalloc

    -sFILESYSTEM=1
    -sUSE_SDL=3
    -sUSE_OGG=1
    -sUSE_VORBIS=1

    -sWASM_BIGINT=1

    -sWEBSOCKET_SUBPROTOCOL=text
    -lwebsocket.js

    -sDISABLE_EXCEPTION_CATCHING=0
    -sASSERTIONS=1

    -sEXPORTED_FUNCTIONS=['_main']
    -sEXPORTED_RUNTIME_METHODS=['callMain']
  >
)

target_link_libraries(${PROJECT_NAME} PRIVATE
  nlohmann_json::nlohmann_json
  Ogg::ogg
  physfs-static
  SDL3::SDL3-static
  sol2::sol2
  spng::spng_static
  vorbis::vorbis
  $<$<NOT:$<BOOL:${EMSCRIPTEN}>>:boost::boost;OpenAL::OpenAL;openssl::openssl>
  $<$<BOOL:${luajit_FOUND}>:luajit::luajit>
  $<$<BOOL:${sentry_FOUND}>:sentry-native::sentry-native>
)

target_precompile_headers(${PROJECT_NAME} PRIVATE ${HEADER_FILES})
